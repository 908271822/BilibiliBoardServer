
// AlarmClient.cpp : 定义应用程序的类行为。
//

#include "stdafx.h"
#include "AlarmClient.h"
#include "AlarmClientDlg.h"
#include "xLogManager.h"
#ifdef _DEBUG
#define new DEBUG_NEW
#endif

#include "server.hpp"
// CAlarmClientApp

BEGIN_MESSAGE_MAP(CAlarmClientApp, CWinApp)
	ON_COMMAND(ID_HELP, &CWinApp::OnHelp)
END_MESSAGE_MAP()


// CAlarmClientApp 构造

CAlarmClientApp::CAlarmClientApp()
{
	// 支持重新启动管理器
	m_dwRestartManagerSupportFlags = AFX_RESTART_MANAGER_SUPPORT_RESTART;

	// TODO: 在此处添加构造代码，
	// 将所有重要的初始化放置在 InitInstance 中
}


// 唯一的一个 CAlarmClientApp 对象

CAlarmClientApp theApp;


// CAlarmClientApp 初始化

BOOL CAlarmClientApp::InitInstance()
{
	// 如果一个运行在 Windows XP 上的应用程序清单指定要
	// 使用 ComCtl32.dll 版本 6 或更高版本来启用可视化方式，
	//则需要 InitCommonControlsEx()。  否则，将无法创建窗口。
	INITCOMMONCONTROLSEX InitCtrls;
	InitCtrls.dwSize = sizeof(InitCtrls);
	// 将它设置为包括所有要在应用程序中使用的
	// 公共控件类。
	InitCtrls.dwICC = ICC_WIN95_CLASSES;
	InitCommonControlsEx(&InitCtrls);

	CWinApp::InitInstance();


	AfxEnableControlContainer();

	// 创建 shell 管理器，以防对话框包含
	// 任何 shell 树视图控件或 shell 列表视图控件。
	CShellManager *pShellManager = new CShellManager;

	// 激活“Windows Native”视觉管理器，以便在 MFC 控件中启用主题
	CMFCVisualManager::SetDefaultManager(RUNTIME_CLASS(CMFCVisualManagerWindows));

	// 标准初始化
	// 如果未使用这些功能并希望减小
	// 最终可执行文件的大小，则应移除下列
	// 不需要的特定初始化例程
	// 更改用于存储设置的注册表项
	// TODO: 应适当修改该字符串，
	// 例如修改为公司或组织名
	SetRegistryKey(_T("应用程序向导生成的本地应用程序"));
	HANDLE hMutex = NULL;
	hMutex = CreateMutex(NULL, FALSE, "CAlarmClientApp");
	if (hMutex != NULL)
	{
		if (GetLastError() == ERROR_ALREADY_EXISTS)
		{
			CloseHandle(hMutex);
			return FALSE;
		}
	}
	boost::thread *pThread = new boost::thread(&CAlarmClientApp::initHttpServer,this);
	Helper::setCurrentWorkPath();
	new xLogMessager("AlarmClient","log",true);
	CAlarmClientDlg dlg;
	m_pMainWnd = &dlg;
	dlg.Create(IDD_ALARMCLIENT_DIALOG);
 	RECT rcWorkArea;
 	//获得客户可用工作区
 	if (SystemParametersInfo(SPI_GETWORKAREA, 0, &rcWorkArea, 0))
 	{
 		int nScrWidth = GetSystemMetrics(SM_CXSCREEN);
 		int nScrHeight = GetSystemMetrics(SM_CYSCREEN);
 		CRect rcWindow;
 		GetWindowRect(dlg.GetSafeHwnd(), rcWindow);
 		//获得移动到右下角的区域
 		CRect rcMoveRect;
 		rcMoveRect.left = rcWorkArea.right - rcWindow.Width();
 		rcMoveRect.right = rcWorkArea.right;
 		rcMoveRect.top = rcWorkArea.bottom - rcWindow.Height();
 		rcMoveRect.bottom = rcWorkArea.bottom;
 		MoveWindow(dlg.GetSafeHwnd(), rcMoveRect.TopLeft().x, rcMoveRect.TopLeft().y, rcMoveRect.Width(), rcMoveRect.Height(), FALSE);
 	}
	dlg.RunModalLoop();
	// 删除上面创建的 shell 管理器。
	if (pShellManager != NULL)
	{
		delete pShellManager;
	}
	delete xLogMessager::getSingletonPtr();
	pThread->interrupt();
	SafeDelete(pThread);
#ifndef _AFXDLL
	ControlBarCleanUp();
#endif

	// 由于对话框已关闭，所以将返回 FALSE 以便退出应用程序，
	//  而不是启动应用程序的消息泵。
	return FALSE;
}

void CAlarmClientApp::initHttpServer()
{
	http::server::server*  httpServer = new http::server::server("0.0.0.0", "23333", "\root");
	httpServer->run();
}

